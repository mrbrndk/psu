;Y = 	{x / 4 + 20, x < 160
;		{-(x/3) + 113, 160 <= x < 320
.486                                      ;Указание набора команд
.model small                              ;small - модель памяти EXE-программы
Data SEGMENT use16
	ASSUME ds:Data
	BkCol db 1                              ;Цвет фона
	LnCol db 15                             ;Цвет линии
	LnAvr db 13                             ;Цвет средней линии
	Yavr  dw 0                              ;Сумма значений Y
Data ENDS
Stak SEGMENT use16 STACK
	ASSUME ss:Stak
	db 256 dup(0)
Stak ENDS
Code SEGMENT use16
	ASSUME cs:Code
start:
	mov ax, 13h                             ;Запись в AH – 0 (инициализация видеорежима), в AL – 13h (режим 320Х200 256 цветов)
	int 10h                                 ;Вызов прерывания BIOS – 10h
	mov ax, seg BkCol                       ;Запись в AX адреса сегмента Data
	mov ds, ax                              ;Установка DS на сегмент Data
	mov ax, 0a000h                          ;Запись в AX адреса сегмента видеобуфера
	mov es, ax                              ;Установка ES на сегмент видеобуфера
	xor di, di                              ;Очистка DI
	mov al, BkCol                           ;Запись в AL код цвета фона
	mov ah, al                              ;Запись в AH код цвета фона

	mov cx, 64000                           ;Заносим в CX количество повторений (320*200)
	loop_0:
	  mov bx, 64000
	  sub bx, cx
	  mov di, bx
	  mov es:[di], al                       ;Закрашивание экрана цветом фона
	  loop loop_0

	xor ax, ax                              ;Инициализация координаты X в регистре AX
	xor dx, dx
	next0:
	  push ax                               ;Сохранение координаты X в стеке
	  mov cx, ax                            ;X в CX
	  sub cx, 160                           ;X - 160
	  or cx, cx                             ;Проверка CX на отрицательное число
	  jns func_2                            ;Переход ко второму случаю
	;============    Первый случай X < 160
	mov cx, 4                             ;Запись в CX константы 4
	  xor dx, dx
	  idiv cx                               ;Вычисление X/4
	  add ax, 20                             ;Вычисление X/4 + 20 (AX содержит значение Y)
	  jmp px_out
	;============    Второй случай X >= 160
	func_2:
	  neg ax                                ;AX в отрицательное число
	  xor dx, dx
	  or ax, ax                             ;Если X = 0
	  jns not_zero                          ;Пропуск
	  not dx                                ;DX как верхняя часть отрицательного числа
	not_zero:
	  mov cx, 3                             ;Запись в CX константы 4
	  idiv cx                               ;Вычисление X/3
	  add ax, 113                           ;Вычисление X/3 + 113 (AX содержит значение Y)

	;============    Вывод графика
	px_out:
	  add word ptr Yavr, ax                 ;Добавление значения Y к переменной

	  mov bx, 199                           ;Перевод Y из системы координат с центром в левом нижнем угле
	  sub bx, ax                            ;нижнем углу в левый верхний угол
	  mov ax, bx                            ;Записываем в AX координату Y в новой системе
	  mov cx, 320                           ;Запись в CX константы 320 для вычисления смещения
	  mul cx                                ;Умножение на количество столбцов на экране
	  pop bx                                ;Восстанавливаем X в регистр BX
	  add ax, bx                            ;Складываем смещение строки с координатой X

	  mov di, ax                            ;Запись в DI значения AX
	  mov al, LnCol                         ;Запись в AL код цвета линии
	  mov es:[di], al                       ;Запись точки в видеобуфер
	  mov ax, bx                            ;Записываем в AX значение координаты X (из BX)
	  inc ax                                ;Инкремент регистра AX
	  cmp ax, 320                           ;Сравнение с правой границей экрана
	  jnz next0                             ;Если не достигли предела, то переход на next0

	;============     Построение среднего значения графика
	mov ax, Yavr                            ;Заносим в AX сумму всех значений Y
	mov cx, 320                             ;Запись в CX константы 320 для вычисления средненго значения
	div cx                                  ;В AX среднее значение Y

	mov bx, 199                             ;Перевод Y из системы координат с центром в левом нижнем угле
	sub bx, ax                              ;нижнем углу в левый верхний угол
	mov ax, bx                              ;Записываем в AX координату Y в новой системе
	mov dx, 320                             ;Запись в DX константы 320 для вычисления смещения
	mul dx                                  ;Умножение на количество столбцов на экране

	mov cx, 320
	mov bl, LnAvr                           ;Запись в AL код цвета линии
	loop_1:
	  mov di, ax                            ;Запись в DI значения AX
	  mov es:[di], bl                       ;Запись точки в видеобуфер
	  inc ax                                ;Инкремент регистра AX
	  loop loop_1

	wait0:
	  in al,60h                             ;Чтение значения из порта клавиатуры
	  cmp al,1                              ;Сравнение AL с кодом клавиши ESC
	  jnz wait0                             ;Если не равны, то переход на wait0
	mov ax,3                                ;Запись в AH – 0 (инициализация видеорежима), в AL – 3h (текстовый режим строк 25, 80 столбцов)

	int 10h                                 ;Вызов прерывания BIOS 10h
	mov ax,4c00h                            ;Запись в AX номер функции завершения программы
	int 21h                                 ;Вызов прерывания MS DOS 21h
Code ENDS
end start